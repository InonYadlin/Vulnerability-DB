import os
import json
from pymongo import MongoClient
from pymongo.errors import ServerSelectionTimeoutError
import subprocess
import threading
import time

# Connection details 
BASIC_FIELDS = ['objects.name', 'objects.description', 'objects.id', 'objects.x_mitre_platforms', 
                'objects.x_mitre_detection', 'objects.kill_chain_phases']
MONGO_URI = 'mongodb://localhost:27017/'
DATABASE_NAME = 'attack_patterns'
COLLECTION_NAME = 'vulnerabilities'
JSON_FOLDER_PATH = './database/attack patterns/'

def connect_to_mongo(uri):
    try:
        client = MongoClient(uri, serverSelectionTimeoutMS=5000)  # Timeout set to 5 seconds
        # Check connection
        client.admin.command('ping')
        return client
    except ServerSelectionTimeoutError:
        print("[ERROR] - Failed to connect to MongoDB")
        exit(1)

import os
import json

import os
import json

def import_json_files_to_mongo(db, collection_name, folder_path, unique_key='_id'):
    collection = db[collection_name]

    # Clear the collection at the start
    print(f'Clearing contents of the collection: {collection_name}...')
    collection.delete_many({})

    # Get list of JSON files in the folder
    files = [f for f in os.listdir(folder_path) if f.endswith('.json')]

    for file_name in files:
        file_path = os.path.join(folder_path, file_name)
        print(f'Importing {file_path}...')

        with open(file_path, 'r') as file:
            data = json.load(file)

            if isinstance(data, list):
                for item in data:
                    # Check for duplicates before inserting
                    if not collection.find_one({unique_key: item.get(unique_key)}):
                        collection.insert_one(item)  # Insert if not a duplicate
                    else:
                        print(f'Duplicate found for {item.get(unique_key)}, skipping.')
            else:
                # Check for duplicates before inserting
                if not collection.find_one({unique_key: data.get(unique_key)}):
                    collection.insert_one(data)  # Insert if not a duplicate
                else:
                    print(f'Duplicate found for {data.get(unique_key)}, skipping.')

def createDB():
    client = connect_to_mongo(MONGO_URI)
    # Check if the database already exists
    existing_databases = client.list_database_names()
    if DATABASE_NAME in existing_databases:
        print(f"[INFO] - Database '{DATABASE_NAME}' already exists. Aborting operation.")
        client.close()
        exit(1)
    
    db = client[DATABASE_NAME]
    import_json_files_to_mongo(db, COLLECTION_NAME, JSON_FOLDER_PATH)
    client.close()

def open_database():
    command = 'mongod --dbpath ./database/mongodb/data/'
    subprocess.run(command, capture_output=True, text=True, shell=True)

def check_mongo_connection(uri, dbname, collection_name=None):
    """
    Checks connection to MongoDB and verifies the existence of the specified database and collection.

    Args:
        uri (str): MongoDB URI.
        dbname (str): Name of the database to check.
        collection_name (str, optional): Name of the collection to check. Defaults to None.

    Returns:
        dict: A dictionary containing connection status, database existence, and collection existence.
    """
    result = {
        'connected': False,
        'database_exists': False,
        'collection_exists': False,
        'error': None
    }

    try:
        # Connect to MongoDB
        client = MongoClient(uri, serverSelectionTimeoutMS=5000)  # 5 seconds timeout

        # Check server connection
        client.server_info()  # Forces a call to the server to check if itâ€™s accessible

        # Check if the specified database exists
        db = client[dbname]
        result['connected'] = True
        result['database_exists'] = True

        # Optionally check if a specific collection exists
        if collection_name:
            collections = db.list_collection_names()
            result['collection_exists'] = collection_name in collections

        # Close the connection
        client.close()

    except ServerSelectionTimeoutError:
        result['error'] = "Failed to connect to MongoDB. Please check the URI and server status."
    except Exception as e:
        result['error'] = str(e)

    return result

def print_all_documents():
    # Create a MongoDB client
    client = MongoClient(MONGO_URI)
    
    # Access the specified database and collection
    db = client[DATABASE_NAME]
    collection = db[COLLECTION_NAME]
    
    # Fetch all documents
    documents = collection.find()
    
    # Print each document
    for document in documents:
        print(document)

def runDB():
    # Connecting to the database
    thread = threading.Thread(target=open_database)
    thread.daemon = True
    thread.start()
    print('[INFO] - Connecting to database...')
    time.sleep(10)

    # Check MongoDB connection
    result = check_mongo_connection(MONGO_URI, DATABASE_NAME, COLLECTION_NAME)
    
    # Print results
    if not result['error']:
        print(f"[INFO] - Collection exists: {result['connected']}")
        print(f"[INFO] - Database exists: {result['database_exists']}")
        print(f"[INFO] - Collection exists: {result['collection_exists']}")

    print_all_documents()
    createDB()