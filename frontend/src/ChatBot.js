import React, { useState, useEffect } from 'react';
import './GlobalStyles.css';
import chatbotIcon from './Assets/chatbot.PNG';

const Chatbot = ({ setSearchTerm }) => {
    const [chatLog, setChatLog] = useState([]);
    const [input, setInput] = useState('');
    const [isOpen, setIsOpen] = useState(false);

    const toggleChat = () => {
        setIsOpen((prev) => !prev);
    };

    // List of available commands
    const availableCommands = [
        '/help - Shows the list of available commands.',
        'check the md5 [hash] - Check an MD5 hash on VirusTotal.',
        'search id [vuln_id] - Search for a specific vulnerability by ID.',
        'list platform [platform_name] - List vulnerabilities for a specific platform.',
        'show phase [phase_name] - Show vulnerabilities by MITRE phase.',
        'find detection [detection_term] - Find vulnerabilities by detection term.',
        'top vulnerabilities [number] - Get the top N vulnerabilities.',
        'count vulnerabilities - Count total vulnerabilities.',
        'Search for vulnerabilities by entering a keyword.',
        'Warning: all functions which search using a term are case sensitive'
    ];

    const handleSendMessage = async () => {
        if (!input.trim()) {
            return;
        }

        const newMessage = { text: input, type: 'user' };
        setChatLog((prev) => [...prev, newMessage]);
        setInput('');

        // Check if the message is the "/help" command
        if (input.trim().toLowerCase() === '/help') {
            const helpMessage = {
                type: 'bot',
                text: availableCommands
            };
            setChatLog((prev) => [...prev, helpMessage]);
            return;
        }

        // Check if the message is a "check md5 ####" command
        const md5CommandPattern = /^check the md5 ([a-fA-F\d]{32})$/;
        const match = input.trim().match(md5CommandPattern);

        if (match) {
            const md5Hash = match[1];
            await handleCheckMd5(md5Hash); // Call MD5 check function
        } else {
            // If it's not an MD5 command, send the query to the chatbot API
            await sendChatQuery(input);
        }
    };

    const handleCheckMd5 = async (md5) => {
        try {
            const response = await fetch('http://localhost:5000/check-md5', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ md5 }),
            });
    
            const data = await response.json();
    
            if (data.result === 'success') {
                const { md5, sha256, last_analysis_stats, scan_date } = data.data;
                const formattedStats = Object.entries(last_analysis_stats)
                    .map(([key, value]) => `${key}: ${value}`)
                    .join(', ');
    
                const botMessage = {
                    type: 'bot',
                    text: [
                        `MD5: ${md5}`,
                        `SHA-256: ${sha256}`,
                        `Scan Date: ${new Date(scan_date * 1000).toLocaleString()}`,
                        `Analysis Stats: ${formattedStats}`
                    ], // Store each line as a separate item in the array
                };
                setChatLog((prev) => [...prev, botMessage]);
            } else {
                const botMessage = {
                    type: 'bot',
                    text: [`Error: ${data.message}`],
                };
                setChatLog((prev) => [...prev, botMessage]);
            }
        } catch (error) {
            console.error('Error checking MD5:', error);
            const errorMessage = { text: ['Failed to check MD5.'], type: 'bot' };
            setChatLog((prev) => [...prev, errorMessage]);
        }
    };    

    const sendChatQuery = async (query) => {
        try {
            const response = await fetch('http://localhost:5000/chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ query }),
            });

            const data = await response.json();

            // Prepare the bot message
            const botMessage = {
                type: 'bot',
                text: Array.isArray(data) && data.length > 0 
                    ? data 
                    : [
                        'No results found.',
                        'Try /help to see all available commands.'
                      ],
            };

            setChatLog((prev) => [...prev, botMessage]);
        } catch (error) {
            console.error('Error:', error);
            const errorMessage = { text: 'Sorry, there was an error.', type: 'bot' };
            setChatLog((prev) => [...prev, errorMessage]);
        }
    };

    useEffect(() => {
        const handleKeyDown = (event) => {
            if (event.key === 'Escape' && isOpen) {
                setIsOpen(false);
            }
        };

        window.addEventListener('keydown', handleKeyDown);

        return () => {
            window.removeEventListener('keydown', handleKeyDown);
        };
    }, [isOpen]);

    return (
        <div className={`chatbot-container ${isOpen ? 'open' : ''}`}>
            {isOpen && (
                <div className="chat-container">
                    <div className="chat-log">
                        {chatLog.map((msg, index) => (
                            <div key={index} className={`message ${msg.type}`}>
                                {msg.type === 'bot' ? (
                                    <div>
                                        {typeof msg.text === 'string' ? (
                                            <pre>{msg.text}</pre> // Use <pre> to preserve formatting
                                        ) : (
                                            <div>
                                                {Array.isArray(msg.text) ? (
                                                    msg.text.map((item, idx) => (
                                                        <div key={idx} className="result-item">
                                                            {typeof item === 'string' ? item : item.name || item}
                                                        </div>
                                                    ))
                                                ) : (
                                                    <div>{msg.text}</div>
                                                )}
                                            </div>
                                        )}
                                    </div>
                                ) : (
                                    msg.text
                                )}
                            </div>
                        ))}
                    </div>
                    <div className="input-container">
                        <input
                            type="text"
                            value={input}
                            onChange={(e) => setInput(e.target.value)}
                            onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                            placeholder="Type your message..."
                            className="chat-input"
                        />
                        <button onClick={handleSendMessage}>Send</button>
                    </div>
                    <p className="chatbot-tip">Tip: Try /help for available commands.</p> {/* Added tip here */}
                </div>
            )}
            <img
                src={chatbotIcon}
                alt="Chatbot"
                className="chatbot-icon"
                onClick={toggleChat}
            />
        </div>
    );
};

export default Chatbot;
