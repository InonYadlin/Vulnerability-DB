import React, { useState, useEffect } from 'react';
import './GlobalStyles.css';
import chatbotIcon from './Assets/chatbot.PNG';
import { Link } from 'react-router-dom'; // Import Link

const Chatbot = ({ setSearchTerm }) => {
    const [chatLog, setChatLog] = useState([]);
    const [input, setInput] = useState('');
    const [isOpen, setIsOpen] = useState(false);

    const toggleChat = () => {
        setIsOpen((prev) => !prev);
    };

    // Function to handle sending messages
    const handleSendMessage = async () => {
        if (!input.trim()) {
            return;
        }

        const newMessage = { text: input, type: 'user' };
        setChatLog((prev) => [...prev, newMessage]);
        setInput('');

        // Check if the message is a "check md5 ####" command
        const md5CommandPattern = /^check the md5 ([a-fA-F\d]{32})$/;
        const match = input.trim().match(md5CommandPattern);

        if (match) {
            const md5Hash = match[1];
            await handleCheckMd5(md5Hash); // Call MD5 check function
        } else {
            // If it's not an MD5 command, send the query to the chatbot API
            await sendChatQuery(input);
        }
    };

    // Function to handle the "check md5" command
    const handleCheckMd5 = async (md5) => {
        try {
            const response = await fetch('http://localhost:5000/check-md5', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ md5 }),
            });

            const data = await response.json();
            const botMessage = {
                type: 'bot',
                text: `MD5 Check Results: ${JSON.stringify(data, null, 2)}`,
            };
            setChatLog((prev) => [...prev, botMessage]);
        } catch (error) {
            console.error('Error checking MD5:', error);
            const errorMessage = { text: 'Failed to check MD5.', type: 'bot' };
            setChatLog((prev) => [...prev, errorMessage]);
        }
    };

    // Function to send the regular chat query to the backend
    const sendChatQuery = async (query) => {
        try {
            const response = await fetch('http://localhost:5000/chat', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ query }),
            });

            const data = await response.json();

            const botMessage = {
                type: 'bot',
                text: Array.isArray(data) && data.length > 0 ? data : ['No results found.'],
            };
            setChatLog((prev) => [...prev, botMessage]);
        } catch (error) {
            console.error('Error:', error);
            const errorMessage = { text: 'Sorry, there was an error.', type: 'bot' };
            setChatLog((prev) => [...prev, errorMessage]);
        }
    };

    useEffect(() => {
        const handleKeyDown = (event) => {
            if (event.key === 'Escape' && isOpen) {
                setIsOpen(false);
            }
        };

        window.addEventListener('keydown', handleKeyDown);

        return () => {
            window.removeEventListener('keydown', handleKeyDown);
        };
    }, [isOpen]);

    const formatForURL = (result) => {
        return result.replace(/\//g, '~'); // Replace slashes with tilde for URL if needed
    };

    return (
      <div className={`chatbot-container ${isOpen ? 'open' : ''}`}>
        {isOpen && (
          <div className="chat-container">
            <div className="chat-log">
              {chatLog.map((msg, index) => (
                <div key={index} className={`message ${msg.type}`}>
                  {msg.type === 'bot' ? (
                    <div>
                      {Array.isArray(msg.text) ? (
                        msg.text.map((item, idx) => (
                          <div key={idx} className="result-item">
                            <Link
                              to={`/result/${formatForURL(typeof item === 'string' ? item : item.name || item)}`} // Use formatForURL
                              className="chatbot-link" // Ensure link style is consistent
                            >
                              {typeof item === 'string' ? item : item.name || item}
                            </Link>
                          </div>
                        ))
                      ) : (
                        <div>{msg.text}</div> // Handle non-array bot messages (like MD5 results)
                      )}
                    </div>
                  ) : (
                    msg.text
                  )}
                </div>
              ))}
            </div>
            <div className="input-container">
              <input
                type="text"
                value={input}
                onChange={(e) => setInput(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                placeholder="Type your message..."
                className="chat-input"
              />
              <button onClick={handleSendMessage}>Send</button>
            </div>
          </div>
        )}
        <img
          src={chatbotIcon}
          alt="Chatbot"
          className="chatbot-icon"
          onClick={toggleChat}
        />
      </div>
    );
  };

export default Chatbot;
