import React, { useState, useEffect } from 'react';
import './GlobalStyles.css'; // Ensure to import your styles
import chatbotIcon from './Assets/chatbot.PNG'; // Import your chatbot icon

const Chatbot = () => {
    const [chatLog, setChatLog] = useState([]);
    const [input, setInput] = useState('');
    const [isOpen, setIsOpen] = useState(false);

    const toggleChat = () => {
        setIsOpen((prev) => !prev);
    };

    const handleSendMessage = async () => {
      // Check if the input is empty
      if (!input.trim()) {
          // You can add a message or alert here if you want
          return; // Prevent sending empty messages
      }
  
      const newMessage = { text: input, type: 'user' };
      setChatLog((prev) => [...prev, newMessage]);
      setInput('');
  
      // Send the query to the backend
      try {
          const response = await fetch('http://localhost:5000/search', {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json',
              },
              body: JSON.stringify({ query: input }),
          });
  
          const data = await response.json();
          // Add bot response with search results
          const botMessage = {
              text: data.length > 0 ? JSON.stringify(data, null, 2) : 'No results found.',
              type: 'bot',
          };
          setChatLog((prev) => [...prev, botMessage]);
      } catch (error) {
          console.error('Error:', error);
          const errorMessage = { text: 'Sorry, there was an error.', type: 'bot' };
          setChatLog((prev) => [...prev, errorMessage]);
      }
  };

    // Handle Escape key to close chat
    useEffect(() => {
      const handleKeyDown = (event) => {
          if (event.key === 'Escape' && isOpen) {
              setIsOpen(false);
          }
      };

      window.addEventListener('keydown', handleKeyDown);
      
      // Clean up the event listener on unmount
      return () => {
          window.removeEventListener('keydown', handleKeyDown);
      };
    }, [isOpen]);

    return (
        <div className={`chatbot-container ${isOpen ? 'open' : ''}`}>
            {isOpen && (
                <div className="chat-container">
                    <div className="chat-log">
                        {chatLog.map((msg, index) => (
                            <div key={index} className={`message ${msg.type}`}>
                                {msg.text}
                            </div>
                        ))}
                    </div>
                    <div className="input-container">
                        <input
                            type="text"
                            value={input}
                            onChange={(e) => setInput(e.target.value)}
                            onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                            placeholder="Type your message..."
                            className="chat-input"
                        />
                        <button onClick={handleSendMessage}>Send</button>
                    </div>
                </div>
            )}
            <img
                src={chatbotIcon}
                alt="Chatbot"
                className="chatbot-icon"
                onClick={toggleChat}
            />
        </div>
    );
};

export default Chatbot;
