import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom'; // Import useNavigate
import './GlobalStyles.css'; // Import global styles

function ResultPage() {
    const { name } = useParams();
    const navigate = useNavigate(); // Initialize useNavigate
    const [details, setDetails] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    // Fetch vulnerability details
    useEffect(() => {
        const fetchDetails = async () => {
            try {
                const formattedName = formatNameForQuery(name);
                const response = await fetchDetailsFromAPI(formattedName);
                const data = await response.json();
                
                const uniqueDetails = removeDuplicateDetails(data);
                setDetails(uniqueDetails);
            } catch (error) {
                setError(error.message);
            } finally {
                setLoading(false);
            }
        };

        fetchDetails();
    }, [name]);

    // Utility functions
    const formatNameForQuery = (name) => {
        return name.replace(/~/g, '/'); // Replace dashes with slashes for the query
    };

    const fetchDetailsFromAPI = async (formattedName) => {
        const url = `http://127.0.0.1:5000/result?q=${encodeURIComponent(formattedName)}`;
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response;
    };

    const removeDuplicateDetails = (data) => {
        return Array.from(new Set(data.map(item => item.name)))
            .map(name => data.find(item => item.name === name));
    };

    const removeLinks = (description) => {
        return description
            .replace(/\[(.*?)\]/g, '$1') // Remove bracketed text
            .replace(/\([^()]*?(https?:\/\/.*?|Citation:.*?)\)/g, '') // Remove links and citations
            .replace(/\s+/g, ' ') // Replace multiple spaces with a single space
            .trim(); // Trim leading/trailing spaces
    };

    const formatForURL = (name) => {
        return name.replace(/\//g, '-'); // Replace slashes with dashes for the URL
    };

    // Render loading, error, or result details
    if (loading) return <div>Loading...</div>;
    if (error) return <div>Error: {error}</div>;

    return (
        <div className="container">
            <main>
                <section className="result-details">
                    {details && details.length > 0 ? (
                        details.map((item, index) => (
                            <div key={index}>
                                <h2>{item.name}</h2>
                                <p>{removeLinks(item.description)}</p>
                                <p><strong>Platforms:</strong> {item.x_mitre_platforms.join(', ')}</p>
                                <p><strong>Detection:</strong> {removeLinks(item.x_mitre_detection)}</p>
                                <a href={`https://attack.mitre.org/techniques/${formatForURL(item.external_references[0].external_id)}`}>
                                    Read more on MITRE ATT&CK
                                </a>
                            </div>
                        ))
                    ) : (
                        <p>No details found for this vulnerability.</p>
                    )}
                </section>
                <button onClick={() => navigate('/')}>Go Back to Main Page</button> {/* Button to navigate back */}
            </main>
        </div>
    );
}

export default ResultPage;
